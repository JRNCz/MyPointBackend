# Generated by Django 4.1.7 on 2023-06-20 09:42

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('points', models.DecimalField(blank=True, decimal_places=0, default=0, max_digits=10, null=True)),
                ('reputation', models.DecimalField(blank=True, decimal_places=0, default=0, max_digits=10, null=True)),
                ('level', models.DecimalField(blank=True, decimal_places=0, default=0, max_digits=10, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'client',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Agency',
            fields=[
                ('agency_id', models.TextField(primary_key=True, serialize=False)),
                ('agency_name', models.TextField(blank=True, null=True)),
                ('agency_url', models.TextField(blank=True, null=True)),
                ('agency_timezone', models.TextField(blank=True, null=True)),
                ('agency_lang', models.TextField(blank=True, null=True)),
                ('agency_phone', models.TextField(blank=True, null=True)),
                ('agency_fare_url', models.TextField(blank=True, null=True)),
                ('agency_email', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'agency',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Calendar',
            fields=[
                ('service_id', models.TextField(primary_key=True, serialize=False)),
                ('monday', models.BooleanField()),
                ('tuesday', models.BooleanField()),
                ('wednesday', models.BooleanField()),
                ('thursday', models.BooleanField()),
                ('friday', models.BooleanField()),
                ('saturday', models.BooleanField()),
                ('sunday', models.BooleanField()),
                ('start_date', models.DecimalField(decimal_places=0, max_digits=8)),
                ('end_date', models.DecimalField(decimal_places=0, max_digits=8)),
            ],
            options={
                'db_table': 'calendar',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CalendarDates',
            fields=[
                ('service_id', models.TextField()),
                ('date', models.DecimalField(blank=True, decimal_places=0, max_digits=8, null=True)),
                ('exception_type', models.IntegerField(blank=True, null=True)),
                ('calendar_dates_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'calendar_dates',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Facility',
            fields=[
                ('facility_id', models.TextField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'facility',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Facilitytype',
            fields=[
                ('facility_type_id', models.IntegerField(primary_key=True, serialize=False)),
                ('facility_type_name', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'db_table': 'facilitytype',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='FareAttributes',
            fields=[
                ('fare_id', models.TextField(primary_key=True, serialize=False)),
                ('price', models.FloatField()),
                ('currency_type', models.TextField()),
                ('payment_method', models.BooleanField()),
                ('transfers', models.IntegerField(blank=True, null=True)),
                ('transfer_duration', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'fare_attributes',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('user_lat', models.FloatField(blank=True, null=True)),
                ('user_lon', models.FloatField(blank=True, null=True)),
                ('feedback_category', models.CharField(blank=True, max_length=50, null=True)),
                ('feedback_subcategory', models.CharField(blank=True, max_length=50, null=True)),
                ('feedback_id', models.AutoField(primary_key=True, serialize=False)),
                ('time_action', models.DateTimeField()),
                ('score', models.DecimalField(decimal_places=1, max_digits=2)),
                ('image_url', models.TextField(blank=True, null=True)),
                ('text', models.TextField(blank=True, null=True)),
                ('facility', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mypointbusiness.facility')),
            ],
            options={
                'db_table': 'feedback',
                'managed': True,
                'unique_together': {('feedback_id', 'facility')},
            },
        ),
        migrations.CreateModel(
            name='Feedbackcat',
            fields=[
                ('feedback_category', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('feedback_category_short', models.CharField(blank=True, max_length=50, null=True)),
                ('color_red', models.DecimalField(blank=True, decimal_places=0, max_digits=3, null=True)),
                ('color_blue', models.DecimalField(blank=True, decimal_places=0, max_digits=3, null=True)),
                ('color_green', models.DecimalField(blank=True, decimal_places=0, max_digits=3, null=True)),
                ('imageurl', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'feedbackcat',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Feedbacksubcat',
            fields=[
                ('feedback_subcategory', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('feedback_subcategory_short', models.CharField(blank=True, max_length=50, null=True)),
                ('color_red', models.DecimalField(blank=True, decimal_places=0, max_digits=3, null=True)),
                ('color_blue', models.DecimalField(blank=True, decimal_places=0, max_digits=3, null=True)),
                ('color_green', models.DecimalField(blank=True, decimal_places=0, max_digits=3, null=True)),
                ('imageurl', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'feedbacksubcat',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='FeedInfo',
            fields=[
                ('feed_publisher_name', models.TextField(primary_key=True, serialize=False)),
                ('feed_publisher_url', models.TextField()),
                ('feed_lang', models.TextField(blank=True, null=True)),
                ('feed_start_date', models.DecimalField(blank=True, decimal_places=0, max_digits=8, null=True)),
                ('feed_end_date', models.DecimalField(blank=True, decimal_places=0, max_digits=8, null=True)),
                ('feed_version', models.TextField(blank=True, null=True)),
                ('feed_contact_email', models.TextField(blank=True, null=True)),
                ('feed_contact_url', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'feed_info',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('item_id', models.AutoField(primary_key=True, serialize=False)),
                ('category', models.CharField(blank=True, max_length=20, null=True)),
                ('name', models.CharField(max_length=20)),
                ('price', models.DecimalField(decimal_places=0, max_digits=8)),
                ('quantity', models.DecimalField(decimal_places=0, max_digits=1000)),
            ],
            options={
                'db_table': 'item',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Levels',
            fields=[
                ('level_id', models.TextField(primary_key=True, serialize=False)),
                ('level_index', models.FloatField()),
                ('level_name', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'levels',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Routes',
            fields=[
                ('route_id', models.TextField(primary_key=True, serialize=False)),
                ('route_short_name', models.TextField(blank=True, null=True)),
                ('route_long_name', models.TextField(blank=True, null=True)),
                ('route_desc', models.TextField(blank=True, null=True)),
                ('route_type', models.IntegerField()),
                ('route_url', models.TextField(blank=True, null=True)),
                ('route_color', models.TextField(blank=True, null=True)),
                ('route_text_color', models.TextField(blank=True, null=True)),
                ('agency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mypointbusiness.agency')),
            ],
            options={
                'db_table': 'routes',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Shapes',
            fields=[
                ('shpid', models.AutoField(primary_key=True, serialize=False)),
                ('shape_id', models.TextField()),
                ('shape_pt_lat', models.FloatField()),
                ('shape_pt_lon', models.FloatField()),
                ('shape_pt_sequence', models.IntegerField()),
                ('shape_dist_traveled', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'shapes',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Shop',
            fields=[
                ('name', models.CharField(blank=True, max_length=25, null=True)),
                ('shop_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'shop',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Translations',
            fields=[
                ('table_name', models.TextField()),
                ('field_name', models.TextField()),
                ('language', models.TextField()),
                ('record_id', models.TextField(blank=True, null=True)),
                ('record_sub_id', models.TextField(blank=True, null=True)),
                ('field_value', models.TextField(blank=True, null=True)),
                ('translations_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'translations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Bus',
            fields=[
                ('facility', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mypointbusiness.facility')),
                ('unit_number', models.TextField(blank=True, null=True)),
                ('registration_plate', models.TextField(blank=True, null=True)),
                ('bus_desc', models.TextField(blank=True, null=True)),
                ('capacity', models.IntegerField(blank=True, null=True)),
                ('standing_capacity', models.IntegerField(blank=True, null=True)),
                ('seats', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'bus',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Carpark',
            fields=[
                ('name', models.TextField(blank=True, null=True)),
                ('facility', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mypointbusiness.facility')),
                ('park_lat', models.FloatField()),
                ('park_lon', models.FloatField()),
                ('parking_time', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'carpark',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Mobilitystation',
            fields=[
                ('name', models.TextField(blank=True, null=True)),
                ('facility', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mypointbusiness.facility')),
                ('mobility_lat', models.FloatField()),
                ('mobility_lon', models.FloatField()),
            ],
            options={
                'db_table': 'mobilitystation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Stops',
            fields=[
                ('stop', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mypointbusiness.facility')),
                ('stop_code', models.TextField(blank=True, null=True)),
                ('stop_name', models.TextField(blank=True, null=True)),
                ('stop_desc', models.TextField(blank=True, null=True)),
                ('stop_lat', models.FloatField(blank=True, null=True)),
                ('stop_lon', models.FloatField(blank=True, null=True)),
                ('zone_id', models.TextField(blank=True, null=True)),
                ('stop_url', models.TextField(blank=True, null=True)),
                ('location_type', models.IntegerField(blank=True, null=True)),
                ('parent_station', models.TextField(blank=True, null=True)),
                ('stop_timezone', models.TextField(blank=True, null=True)),
                ('wheelchair_boarding', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'stops',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Trips',
            fields=[
                ('service_id', models.TextField()),
                ('trip_id', models.TextField(primary_key=True, serialize=False)),
                ('trip_headsign', models.TextField(blank=True, null=True)),
                ('direction_id', models.BooleanField(blank=True, null=True)),
                ('block_id', models.TextField(blank=True, null=True)),
                ('shape_id', models.TextField(blank=True, null=True)),
                ('trip_short_name', models.TextField(blank=True, null=True)),
                ('wheelchair_accessible', models.IntegerField(blank=True, null=True)),
                ('bikes_allowed', models.IntegerField(blank=True, null=True)),
                ('route', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mypointbusiness.routes')),
            ],
            options={
                'db_table': 'trips',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Orders',
            fields=[
                ('orders_id', models.AutoField(primary_key=True, serialize=False)),
                ('quantity', models.DecimalField(decimal_places=0, max_digits=2)),
                ('order_date', models.DateTimeField(blank=True, null=True)),
                ('item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mypointbusiness.item')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'orders',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='item',
            name='shop',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mypointbusiness.shop'),
        ),
        migrations.CreateModel(
            name='GiveFeedback',
            fields=[
                ('give_feedback_id', models.AutoField(primary_key=True, serialize=False)),
                ('facility_id', models.TextField(blank=True, null=True)),
                ('feedback', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mypointbusiness.feedback')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'give_feedback',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Frequencies',
            fields=[
                ('start_time', models.DurationField()),
                ('end_time', models.DurationField()),
                ('headway_secs', models.IntegerField()),
                ('exact_times', models.BooleanField(blank=True, null=True)),
                ('frequency_id', models.AutoField(primary_key=True, serialize=False)),
                ('trip', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mypointbusiness.trips')),
            ],
            options={
                'db_table': 'frequencies',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ValidateFeedback',
            fields=[
                ('validate_feedback_id', models.AutoField(primary_key=True, serialize=False)),
                ('facility_id', models.TextField(blank=True, null=True)),
                ('is_true', models.BooleanField(blank=True, null=True)),
                ('feedback', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mypointbusiness.feedback')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'validate_feedback',
                'managed': True,
                'unique_together': {('user', 'feedback')},
            },
        ),
        migrations.CreateModel(
            name='Transfers',
            fields=[
                ('transfer_type', models.IntegerField()),
                ('min_transfer_time', models.IntegerField(blank=True, null=True)),
                ('transfer_id', models.AutoField(primary_key=True, serialize=False)),
                ('from_stop', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='transfers_from_stop', to='mypointbusiness.stops')),
                ('to_stop', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='transfers_to_stop', to='mypointbusiness.stops')),
            ],
            options={
                'db_table': 'transfers',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='StopTimes',
            fields=[
                ('arrival_time', models.DurationField(blank=True, null=True)),
                ('departure_time', models.DurationField()),
                ('stop_sequence', models.IntegerField()),
                ('stop_headsign', models.TextField(blank=True, null=True)),
                ('pickup_type', models.IntegerField(blank=True, null=True)),
                ('drop_off_type', models.IntegerField(blank=True, null=True)),
                ('shape_dist_traveled', models.FloatField(blank=True, null=True)),
                ('timepoint', models.BooleanField(blank=True, null=True)),
                ('stop_times_id', models.AutoField(primary_key=True, serialize=False)),
                ('trip', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mypointbusiness.trips')),
                ('stop', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mypointbusiness.stops')),
            ],
            options={
                'db_table': 'stop_times',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Rail',
            fields=[
                ('facility', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mypointbusiness.facility')),
                ('agency_id', models.TextField(blank=True, null=True)),
                ('route', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mypointbusiness.routes')),
            ],
            options={
                'db_table': 'rail',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Pathways',
            fields=[
                ('pathway_id', models.TextField(primary_key=True, serialize=False)),
                ('pathway_mode', models.IntegerField()),
                ('is_bidirectional', models.BooleanField()),
                ('length', models.FloatField(blank=True, null=True)),
                ('traversal_time', models.IntegerField(blank=True, null=True)),
                ('stair_count', models.IntegerField(blank=True, null=True)),
                ('max_slope', models.FloatField(blank=True, null=True)),
                ('min_width', models.FloatField(blank=True, null=True)),
                ('signposted_as', models.TextField(blank=True, null=True)),
                ('reversed_signposted_as', models.TextField(blank=True, null=True)),
                ('from_stop', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='pathways_from_stop', to='mypointbusiness.stops')),
                ('to_stop', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='pathways_to_stop', to='mypointbusiness.stops')),
            ],
            options={
                'db_table': 'pathways',
                'managed': True,
            },
        ),
        migrations.AlterUniqueTogether(
            name='item',
            unique_together={('item_id', 'shop')},
        ),
        migrations.CreateModel(
            name='HasFacilities',
            fields=[
                ('has_facilities_id', models.AutoField(primary_key=True, serialize=False)),
                ('facility', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mypointbusiness.facility')),
                ('facility_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mypointbusiness.facilitytype')),
            ],
            options={
                'db_table': 'has_facilities',
                'managed': True,
                'unique_together': {('facility_type', 'facility')},
            },
        ),
        migrations.CreateModel(
            name='Feedbackstruct',
            fields=[
                ('feedback_struct_id', models.AutoField(primary_key=True, serialize=False)),
                ('facility_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mypointbusiness.facilitytype')),
                ('feedback_category', models.ForeignKey(blank=True, db_column='feedback_category', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mypointbusiness.feedbackcat')),
                ('feedback_subcategory', models.ForeignKey(blank=True, db_column='feedback_subcategory', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mypointbusiness.feedbacksubcat')),
            ],
            options={
                'db_table': 'feedbackstruct',
                'managed': True,
                'unique_together': {('facility_type', 'feedback_category', 'feedback_subcategory')},
            },
        ),
        migrations.CreateModel(
            name='FareRules',
            fields=[
                ('fare', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='mypointbusiness.fareattributes')),
                ('origin_id', models.TextField(blank=True, null=True)),
                ('destination_id', models.TextField(blank=True, null=True)),
                ('contains_id', models.TextField(blank=True, null=True)),
                ('route', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='mypointbusiness.routes')),
            ],
            options={
                'db_table': 'fare_rules',
                'managed': True,
            },
        ),
    ]
